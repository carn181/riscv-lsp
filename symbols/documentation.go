package symbols

import "riscv-lsp/types"


var regs []types.Register = []types.Register{types.Register{Register:"x0",Name:"zero",Description:"Hard-wired zero",Type:""},
	{Register:"x1",Name:"ra",Description:"Return address",Type:"Caller"},
	{Register:"x2",Name:"sp",Description:"Stack pointer",Type:"Callee"},
	{Register:"x3",Name:"gp",Description:"Global pointer",Type:""},
	{Register:"x4",Name:"tp",Description:"Thread pointer",Type:""},
	{Register:"x5",Name:"t0",Description:"Temporary/alternate link register",Type:"Caller"},
	{Register:"x6",Name:"t1",Description:"Temporaries",Type:"Caller"},
	{Register:"x7",Name:"t2",Description:"Temporaries",Type:"Caller"},
	{Register:"x8",Name:"s0",Description:"Saved register/frame pointer",Type:"Callee"},
	{Register:"x8",Name:"fp",Description:"Saved register/frame pointer",Type:"Callee"},
	{Register:"x9",Name:"s1",Description:"Saved register",Type:"Callee"},
	{Register:"x10",Name:"a0",Description:"Function arguments/return values",Type:"Caller"},
	{Register:"x11",Name:"a1",Description:"Function arguments/return values",Type:"Caller"},
	{Register:"x12",Name:"a2",Description:"Function arguments",Type:"Caller"},
	{Register:"x13",Name:"a3",Description:"Function arguments",Type:"Caller"},
	{Register:"x14",Name:"a4",Description:"Function arguments",Type:"Caller"},
	{Register:"x15",Name:"a5",Description:"Function arguments",Type:"Caller"},
	{Register:"x16",Name:"a6",Description:"Function arguments",Type:"Caller"},
	{Register:"x17",Name:"a7",Description:"Function arguments",Type:"Caller"},
	{Register:"x18",Name:"s2",Description:"Saved registers",Type:"Callee"},
	{Register:"x19",Name:"s3",Description:"Saved registers",Type:"Callee"},
	{Register:"x20",Name:"s4",Description:"Saved registers",Type:"Callee"},
	{Register:"x21",Name:"s5",Description:"Saved registers",Type:"Callee"},
	{Register:"x22",Name:"s6",Description:"Saved registers",Type:"Callee"},
	{Register:"x23",Name:"s7",Description:"Saved registers",Type:"Callee"},
	{Register:"x24",Name:"s8",Description:"Saved registers",Type:"Callee"},
	{Register:"x25",Name:"s9",Description:"Saved registers",Type:"Callee"},
	{Register:"x26",Name:"s10",Description:"Saved registers",Type:"Callee"},
	{Register:"x27",Name:"s11",Description:"Saved registers",Type:"Callee"},
	{Register:"x28",Name:"t3",Description:"Temporaries",Type:"Caller"},
	{Register:"x29",Name:"t4",Description:"Temporaries",Type:"Caller"},
	{Register:"x30",Name:"t5",Description:"Temporaries",Type:"Caller"},
	{Register:"x31",Name:"t6",Description:"Temporaries",Type:"Caller"}}

var ops  []types.Opcode   = []types.Opcode{
	{Name: "lr.d", Format: "lr.d       rd,rs1", Description: "load a 64-bit data from the address in rs1, places value in rd, and registers a reservation on the memory address.", Implementation: "x[rd] = LoadReserved64(M[x[rs1]])"},
	{Name: "sc.d", Format: "sc.d       rd,rs1,rs2", Description: "write a 64-bit data in rs2 to the address in rs1, provided a valid reservation still exists on that address.SC writes zero to rd on success or a nonzero code on failure.", Implementation: "x[rd] = StoreConditional64(M[x[rs1]], x[rs2])"},
	{Name: "amoswap.d", Format: "amoswap.d  rd,rs2,(rs1)", Description: "atomically load a 64-bit data value from the address in rs1, place the value into register rd, swap the loaded value and the original 64-bit value in rs2, then store the result back to the address in rs1.", Implementation: "x[rd] = AMO64(M[x[rs1]] SWAP x[rs2])"},
	{Name: "amoadd.d", Format: "amoadd.d   rd,rs2,(rs1)", Description: "atomically load a 64-bit data value from the address in rs1, place the value into register rd, apply add the loaded value and the original 64-bit value in rs2, then store the result back to the address in rs1.", Implementation: "x[rd] = AMO64(M[x[rs1]] + x[rs2])"},
	{Name: "amoxor.d", Format: "amoxor.d   rd,rs2,(rs1)", Description: "atomically load a 64-bit data value from the address in rs1, place the value into register rd, apply xor the loaded value and the original 64-bit value in rs2, then store the result back to the address in rs1.", Implementation: "x[rd] = AMO64(M[x[rs1]] ^ x[rs2])"},
	{Name: "amoand.d", Format: "amoand.d   rd,rs2,(rs1)", Description: "atomically load a 64-bit data value from the address in rs1, place the value into register rd, apply and the loaded value and the original 64-bit value in rs2, then store the result back to the address in rs1.", Implementation: "x[rd] = AMO64(M[x[rs1]] & x[rs2])"},
	{Name: "amoor.d", Format: "amoor.d    rd,rs2,(rs1)", Description: "atomically load a 64-bit data value from the address in rs1, place the value into register rd, apply or the loaded value and the original 64-bit value in rs2, then store the result back to the address in rs1.", Implementation: "x[rd] = AMO64(M[x[rs1]] | x[rs2])"},
	{Name: "amomin.d", Format: "amomin.d   rd,rs2,(rs1)", Description: "atomically load a 64-bit data value from the address in rs1, place the value into register rd, apply min the loaded value and the original 64-bit value in rs2, then store the result back to the address in rs1.", Implementation: "x[rd] = AMO64(M[x[rs1]] MIN x[rs2])"},
	{Name: "amomax.d", Format: "amomax.d   rd,rs2,(rs1)", Description: "atomically load a 64-bit data value from the address in rs1, place the value into register rd, apply max the loaded value and the original 64-bit value in rs2, then store the result back to the address in rs1.", Implementation: "x[rd] = AMO64(M[x[rs1]] MAX x[rs2])"},
	{Name: "amominu.d", Format: "amominu.d  rd,rs2,(rs1)", Description: "atomically load a 64-bit data value from the address in rs1, place the value into register rd, apply unsigned min the loaded value and the original 64-bit value in rs2, then store the result back to the address in rs1.", Implementation: "x[rd] = AMO64(M[x[rs1]] MINU x[rs2])"},
	{Name: "amomaxu.d", Format: "amomaxu.d  rd,rs2,(rs1)", Description: "atomically load a 64-bit data value from the address in rs1, place the value into register rd, apply unsigned max the loaded value and the original 64-bit value in rs2, then store the result back to the address in rs1.", Implementation: "x[rd] = AMO64(M[x[rs1]] MAXU x[rs2])"},
	{Name: "fcvt.l.d", Format: "fcvt.l.d   rd,rs1", Description: "", Implementation: "x[rd] = s64_{f64}(f[rs1])"},
	{Name: "fcvt.lu.d", Format: "fcvt.lu.d  rd,rs1", Description: "", Implementation: "x[rd] = u64_{f64}(f[rs1])"},
	{Name: "fmv.x.d", Format: "fmv.x.d    rd,rs1", Description: "", Implementation: "x[rd] = f[rs1][63:0]"},
	{Name: "fcvt.d.l", Format: "fcvt.d.l   rd,rs1", Description: "", Implementation: "f[rd] = f64_{s64}(x[rs1])"},
	{Name: "fcvt.d.lu", Format: "fcvt.d.lu  rd,rs1", Description: "", Implementation: "f[rd] = f64_{u64}(x[rs1])"},
	{Name: "fmv.d.x", Format: "fmv.d.x    rd,rs1", Description: "", Implementation: "f[rd] = x[rs1][63:0]"},
	{Name: "fcvt.l.s", Format: "fcvt.l.s   rd,rs1", Description: "", Implementation: "x[rd] = s64_{f32}(f[rs1])"},
	{Name: "fcvt.lu.s", Format: "fcvt.lu.s  rd,rs1", Description: "", Implementation: "x[rd] = u64_{f32}(f[rs1])"},
	{Name: "fcvt.s.l", Format: "fcvt.s.l   rd,rs1", Description: "", Implementation: "f[rd] = f32_{s64}(x[rs1])"},
	{Name: "fcvt.s.lu", Format: "fcvt.s.lu  rd,rs1", Description: "", Implementation: "f[rd] = f32_{u64}(x[rs1])"},
	{Name: "addiw", Format: "addiw      rd,rs1,imm", Description: "Adds the sign-extended 12-bit immediate to register rs1 and produces the proper sign-extension of a 32-bit result in rd.Overflows are ignored and the result is the low 32 bits of the result sign-extended to 64 bits.Note, ADDIW rd, rs1, 0 writes the sign-extension of the lower 32 bits of register rs1 into register rd (assembler pseudoinstruction SEXT.W).", Implementation: "x[rd] = sext((x[rs1] + sext(immediate))[31:0])"},
	{Name: "slliw", Format: "slliw      rd,rs1,shamt", Description: "Performs logical left shift on the 32-bit of value in register rs1 by the shift amount held in the lower 5 bits of the immediate.Encodings with $imm[5] neq 0$ are reserved.", Implementation: "x[rd] = sext((x[rs1] << shamt)[31:0])"},
	{Name: "srliw", Format: "srliw      rd,rs1,shamt", Description: "Performs logical right shift on the 32-bit of value in register rs1 by the shift amount held in the lower 5 bits of the immediate.Encodings with $imm[5] neq 0$ are reserved.", Implementation: "x[rd] = sext(x[rs1][31:0] >>u shamt)"},
	{Name: "sraiw", Format: "sraiw      rd,rs1,shamt", Description: "Performs arithmetic right shift on the 32-bit of value in register rs1 by the shift amount held in the lower 5 bits of the immediate.Encodings with $imm[5] neq 0$ are reserved.", Implementation: "x[rd] = sext(x[rs1][31:0] >>s shamt)"},
	{Name: "addw", Format: "addw       rd,rs1,rs2", Description: "Adds the 32-bit of registers rs1 and 32-bit of register rs2 and stores the result in rd.Arithmetic overflow is ignored and the low 32-bits of the result is sign-extended to 64-bits and written to the destination register.", Implementation: "x[rd] = sext((x[rs1] + x[rs2])[31:0])"},
	{Name: "subw", Format: "subw       rd,rs1,rs2", Description: "Subtract the 32-bit of registers rs1 and 32-bit of register rs2 and stores the result in rd.Arithmetic overflow is ignored and the low 32-bits of the result is sign-extended to 64-bits and written to the destination register.", Implementation: "x[rd] = sext((x[rs1] - x[rs2])[31:0])"},
	{Name: "sllw", Format: "sllw       rd,rs1,rs2", Description: "Performs logical left shift on the low 32-bits value in register rs1 by the shift amount held in the lower 5 bits of register rs2 and produce 32-bit results and written to the destination register rd.", Implementation: "x[rd] = sext((x[rs1] << x[rs2][4:0])[31:0])"},
	{Name: "srlw", Format: "srlw       rd,rs1,rs2", Description: "Performs logical right shift on the low 32-bits value in register rs1 by the shift amount held in the lower 5 bits of register rs2 and produce 32-bit results and written to the destination register rd.", Implementation: "x[rd] = sext(x[rs1][31:0] >>u x[rs2][4:0])"},
	{Name: "sraw", Format: "sraw       rd,rs1,rs2", Description: "Performs arithmetic right shift on the low 32-bits value in register rs1 by the shift amount held in the lower 5 bits of register rs2 and produce 32-bit results and written to the destination register rd.", Implementation: "x[rd] = sext(x[rs1][31:0] >>s x[rs2][4:0])"},
	{Name: "lwu", Format: "lwu        rd,offset(rs1)", Description: "Loads a 32-bit value from memory and zero-extends this to 64 bits before storing it in register rd.", Implementation: "x[rd] = M[x[rs1] + sext(offset)][31:0]"},
	{Name: "ld", Format: "ld         rd,offset(rs1)", Description: "Loads a 64-bit value from memory into register rd for RV64I.", Implementation: "x[rd] = M[x[rs1] + sext(offset)][63:0]"},
	{Name: "sd", Format: "sd         rs2,offset(rs1)", Description: "Store 64-bit, values from register rs2 to memory.", Implementation: "M[x[rs1] + sext(offset)] = x[rs2][63:0]"},
	{Name: "mulw", Format: "mulw       rd,rs1,rs2", Description: "", Implementation: "x[rd] = sext((x[rs1] \u00d7 x[rs2])[31:0])"},
	{Name: "divw", Format: "divw       rd,rs1,rs2", Description: "perform an 32 bits by 32 bits signed integer division of rs1 by rs2.", Implementation: "x[rd] = sext(x[rs1][31:0] /s x[rs2][31:0]"},
	{Name: "divuw", Format: "divuw      rd,rs1,rs2", Description: "perform an 32 bits by 32 bits unsigned integer division of rs1 by rs2.", Implementation: "x[rd] = sext(x[rs1][31:0] /u x[rs2][31:0])"},
	{Name: "remw", Format: "remw       rd,rs1,rs2", Description: "perform an 32 bits by 32 bits signed integer reminder of rs1 by rs2.", Implementation: "x[rd] = sext(x[rs1][31:0] %s x[rs2][31:0])"},
	{Name: "remuw", Format: "remuw      rd,rs1,rs2", Description: "perform an 32 bits by 32 bits unsigned integer reminder of rs1 by rs2.", Implementation: "x[rd] = sext(x[rs1][31:0] %u x[rs2][31:0])"},
	{Name:"lr.w", Format:"lr.w       rd,rs1", Description:"load a word from the address in rs1, places the sign-extended value in rd, and registers a reservation on the memory address.", Implementation:"x[rd] = LoadReserved32(M[x[rs1]])"},
	{Name:"sc.w", Format:"sc.w       rd,rs1,rs2", Description:"write a word in rs2 to the address in rs1, provided a valid reservation still exists on that address.\nSC writes zero to rd on success or a nonzero code on failure.\nSC writes zero to rd on success or a nonzero code on failure"},
	{Name:"amoswap.w", Format:"amoswap.w  rd,rs2,(rs1)", Description:"atomically load a 32-bit signed data value from the address in rs1, place the value into register rd, swap the loaded value and the original 32-bit signed value in rs2, then store the result back to the address in rs1.", Implementation:"x[rd] = AMO32(M[x[rs1]] SWAP x[rs2])"},
	{Name:"amoadd.w", Format:"amoadd.w   rd,rs2,(rs1)", Description:"atomically load a 32-bit signed data value from the address in rs1, place the value into register rd, apply add the loaded value and the original 32-bit signed value in rs2, then store the result back to the address in rs1."},
	{Name:"amoxor.w", Format:"amoxor.w   rd,rs2,(rs1)", Description:"atomically load a 32-bit signed data value from the address in rs1, place the value into register rd, apply exclusive or the loaded value and the original 32-bit signed value in rs2, then store the result back to the address in rs1.", Implementation:"x[rd] = AMO32(M[x[rs1]] ^ x[rs2])"},
	{Name:"amoand.w", Format:"amoand.w   rd,rs2,(rs1)", Description:"atomically load a 32-bit signed data value from the address in rs1, place the value into register rd, apply and the loaded value and the original 32-bit signed value in rs2, then store the result back to the address in rs1.", Implementation:"x[rd] = AMO32(M[x[rs1]] & x[rs2])"},
	{Name:"amoor.w", Format:"amoor.w    rd,rs2,(rs1)", Description:"atomically load a 32-bit signed data value from the address in rs1, place the value into register rd, apply or the loaded value and the original 32-bit signed value in rs2, then store the result back to the address in rs1.", Implementation:"x[rd] = AMO32(M[x[rs1]] | x[rs2])"},
	{Name:"amomin.w", Format:"amomin.w   rd,rs2,(rs1)", Description:"atomically load a 32-bit signed data value from the address in rs1, place the value into register rd, apply min operator the loaded value and the original 32-bit signed value in rs2, then store the result back to the address in rs1.", Implementation:"x[rd] = AMO32(M[x[rs1]] MIN x[rs2])"},
	{Name:"amomax.w", Format:"amomax.w   rd,rs2,(rs1)", Description:"atomically load a 32-bit signed data value from the address in rs1, place the value into register rd, apply max operator the loaded value and the original 32-bit signed value in rs2, then store the result back to the address in rs1.", Implementation:"x[rd] = AMO32(M[x[rs1]] MAX x[rs2])"},
	{Name:"amominu.w", Format:"amominu.w  rd,rs2,(rs1)", Description:"atomically load a 32-bit unsigned data value from the address in rs1, place the value into register rd, apply unsigned min the loaded value and the original 32-bit unsigned value in rs2, then store the result back to the address in rs1.", Implementation:"x[rd] = AMO32(M[x[rs1]] MINU x[rs2])"},
	{Name:"amomaxu.w", Format:"amomaxu.w  rd,rs2,(rs1)", Description:"atomically load a 32-bit unsigned data value from the address in rs1, place the value into register rd, apply unsigned max the loaded value and the original 32-bit unsigned value in rs2, then store the result back to the address in rs1.", Implementation:"x[rd] = AMO32(M[x[rs1]] MAXU x[rs2])"},
	{Name: "c.addi4spn", Format: "c.addi4spn rd',uimm", Description: "Add a zero-extended non-zero immediate, scaled by 4, to the stack pointer, x2, and writes the result to rd'.This instruction is used to generate pointers to stack-allocated variables, and expands to addi rd', x2, nzuimm[9:2].", Implementation: "x[8+rd'] = x[2] + nzuimm", Expansion: "addi rd',x2,nzuimm"},
	{Name: "c.fld", Format: "c.fld      rd',uimm(rs1')", Description: "Load a double-precision floating-point value from memory into floating-point register rd'.It computes an effective address by adding the zero-extended offset, scaled by 8, to the base address in register rs1'.", Implementation: "f[8+rd'] = M[x[8+rs1'] + uimm][63:0]", Expansion: "fld rd',offset[7:3](rs1')"},
	{Name: "c.lw", Format: "c.lw       rd',uimm(rs1')", Description: "Load a 32-bit value from memory into register rd'. It computes an effective address by adding the zero-extended offset, scaled by 4, to the base address in register rs1'.", Implementation: "x[8+rd'] = sext(M[x[8+rs1'] + uimm][31:0])", Expansion: "lw rd',offset[6:2](rs1')"},
	{Name: "c.flw", Format: "c.flw      rd',uimm(rs1')", Description: "Load a single-precision floating-point value from memory into floating-point register rd'.It computes an effective address by adding the zero-extended offset, scaled by 4, to the base address in register rs1'.", Implementation: "f[8+rd'] = M[x[8+rs1'] + uimm][31:0]", Expansion: "lw rd',offset[6:2](rs1')"},
	{Name: "c.ld", Format: "c.ld       rd',uimm(rs1')", Description: "Load a 64-bit value from memory into register rd'.It computes an effective address by adding the zero-extended offset, scaled by 8, to the base address in register rs1'.", Implementation: "x[8+rd'] = M[x[8+rs1'] + uimm][63:0]", Expansion: "ld rd', offset[7:3](rs1')"},
	{Name: "c.fsd", Format: "c.fsd      rd',uimm(rs1')", Description: "Store a double-precision floating-point value in floating-point register rs2' to memory.It computes an effective address by adding the zeroextended offset, scaled by 8, to the base address in register rs1'.", Implementation: "M[x[8+rs1'] + uimm][63:0] = f[8+rs2']", Expansion: "fsd rs2',offset[7:3](rs1')"},
	{Name: "c.sw", Format: "c.sw       rd',uimm(rs1')", Description: "Store a 32-bit value in register rs2' to memory.It computes an effective address by adding the zero-extended offset, scaled by 4, to the base address in register rs1'.", Implementation: "M[x[8+rs1'] + uimm][31:0] = x[8+rs2']", Expansion: "sw rs2',offset[6:2](rs1')"},
	{Name: "c.fsw", Format: "c.fsw      rd',uimm(rs1')", Description: "Store a single-precision floating-point value in floatingpoint register rs2' to memory.It computes an effective address by adding the zero-extended offset, scaled by 4, to the base address in register rs1'.", Implementation: "M[x[8+rs1'] + uimm][31:0] = f[8+rs2']", Expansion: "fsw rs2', offset[6:2](rs1')"},
	{Name: "c.sd", Format: "c.sd       rd',uimm(rs1')", Description: "Store a 64-bit value in register rs2' to memory.It computes an effective address by adding the zero-extended offset, scaled by 8, to the base address in register rs1'.", Implementation: "M[x[8+rs1'] + uimm][63:0] = x[8+rs2']", Expansion: "sd rs2', offset[7:3](rs1')"},
	{Name: "c.nop", Format: "c.nop", Description: "Does not change any user-visible state, except for advancing the pc.", Implementation: "None", Expansion: "addi x0, x0, 0"},
	{Name: "c.addi", Format: "c.addi     rd,u[12:12]|u[6:2]", Description: "Add the non-zero sign-extended 6-bit immediate to the value in register rd then writes the result to rd.", Implementation: "x[rd] = x[rd] + sext(imm)", Expansion: "addi rd, rd, nzimm[5:0]"},
	{Name: "c.jal", Format: "c.jal offset", Description: "Jump to address and place return address in rd.", Implementation: "x[1] = pc+2; pc += sext(offset)", Expansion: "jal x1, offset[11:1]"},
	{Name: "c.addiw", Format: "c.addiw    rd,imm", Description: "Add the non-zero sign-extended 6-bit immediate to the value in register rd then produce 32-bit result, then sign-extends result to 64 bits.", Implementation: "x[rd] = sext((x[rd] + sext(imm))[31:0])", Expansion: "addiw rd,rd,imm[5:0]"},
	{Name: "c.li", Format: "c.li       rd,imm", Description: "Load the sign-extended 6-bit immediate, imm, into register rd.C.LI is only valid when rd!=x0.", Implementation: "x[rd] = sext(imm)", Expansion: "addi rd,x0,imm[5:0]"},
	{Name: "c.addi16sp", Format: "c.addi16sp imm", Description: "Add the non-zero sign-extended 6-bit immediate to the value in the stack pointer (sp=x2), where the immediate is scaled to represent multiples of 16 in the range (-512,496).", Implementation: "x[2] = x[2] + sext(imm)", Expansion: "addi x2,x2, nzimm[9:4]"},
	{Name: "c.lui", Format: "c.lui      rd,imm", Description: "", Implementation: "x[rd] = sext(imm[17:12] << 12)", Expansion: "lui rd,nzuimm[17:12]"},
	{Name: "c.srli", Format: "c.srli     rd',uimm", Description: "Perform a logical right shift of the value in register rd' then writes the result to rd'.The shift amount is encoded in the shamt field, where shamt[5] must be zero for RV32C.", Implementation: "x[8+rd'] = x[8+rd'] >>u uimm", Expansion: "srli rd',rd',shamt[5:0]"},
	{Name: "c.srai", Format: "c.srai     rd',uimm", Description: "Perform a arithmetic right shift of the value in register rd' then writes the result to rd'.The shift amount is encoded in the shamt field, where shamt[5] must be zero for RV32C.", Implementation: "x[8+rd'] = x[8+rd'] >>s uimm", Expansion: "srai rd',rd',shamt[5:0]"},
	{Name: "c.andi", Format: "c.andi     rd',imm", Description: "Compute the bitwise AND of of the value in register rd' and the sign-extended 6-bit immediate, then writes the result to rd'.", Implementation: "x[8+rd'] = x[8+rd'] & sext(imm)", Expansion: "andi rd',rd',imm[5:0]"},
	{Name: "c.sub", Format: "c.sub      rd',rs2'", Description: "Subtract the value in register rs2' from the value in register rd', then writes the result to register rd'.", Implementation: "x[8+rd'] = x[8+rd'] - x[8+rs2']", Expansion: "sub rd',rd',rs2'"},
	{Name: "c.xor", Format: "c.xor      rd',rs2'", Description: "Compute the bitwise XOR of the values in registers rd' and rs2', then writes the result to register rd'.", Implementation: "x[8+rd'] = x[8+rd'] ^ x[8+rs2']", Expansion: "xor rd',rd',rs2'"},
	{Name: "c.or", Format: "c.or       rd',rs2'", Description: "Compute the bitwise OR of the values in registers rd' and rs2', then writes the result to register rd'.", Implementation: "x[8+rd'] = x[8+rd'] | x[8+rs2']", Expansion: "or rd',rd',rs2"},
	{Name: "c.and", Format: "c.and      rd',rs2'", Description: "Compute the bitwise AND of the values in registers rd' and rs2', then writes the result to register rd'.", Implementation: "x[8+rd'] = x[8+rd'] & x[8+rs2']", Expansion: "and rd',rd',rs2'"},
	{Name: "c.subw", Format: "c.subw     rd',rs2'", Description: "Subtract the value in register rs2' from the value in register rd', then sign-extends the lower 32 bits of the difference before writing the result to register rd'.", Implementation: "x[8+rd'] = sext((x[8+rd'] - x[8+rs2'])[31:0])", Expansion: "subw rd',rd',rs2'"},
	{Name: "c.addw", Format: "c.addw     rd',rs2'", Description: "Add the value in register rs2' from the value in register rd', then sign-extends the lower 32 bits of the difference before writing the result to register rd'.", Implementation: "x[8+rd'] = sext((x[8+rd'] + x[8+rs2'])[31:0])", Expansion: "addw rd',rd',rs2'"},
	{Name: "c.j", Format: "c.j offset", Description: "Unconditional control transfer.", Implementation: "pc += sext(offset)", Expansion: "jal x0,offset[11:1]"},
	{Name: "c.beqz", Format: "c.beqz     rs1',offset", Description: "Take the branch if the value in register rs1' is zero.", Implementation: "if (x[8+rs1'] == 0) pc += sext(offset)", Expansion: "beq rs1',x0,offset[8:1]"},
	{Name: "c.bnez", Format: "c.bnez     rs1',offset", Description: "Take the branch if the value in register rs1' is not zero.", Implementation: "if (x[8+rs1'] != 0) pc += sext(offset)", Expansion: "bne rs1',x0,offset[8:1]"},
	{Name: "c.slli", Format: "c.slli     rd,uimm", Description: "Perform a logical left shift of the value in register rd then writes the result to rd.The shift amount is encoded in the shamt field, where shamt[5] must be zero for RV32C.", Implementation: "x[rd] = x[rd] << uimm", Expansion: "slli rd,rd,shamt[5:0]"},
	{Name: "c.fldsp", Format: "c.fldsp    rd,uimm(x2)", Description: "Load a double-precision floating-point value from memory into floating-point register rd.It computes its effective address by adding the zero-extended offset, scaled by 8, to the stack pointer, x2.", Implementation: "f[rd] = M[x[2] + uimm][63:0]", Expansion: "fld rd,offset[8:3](x2)"},
	{Name: "c.lwsp", Format: "c.lwsp     rd,uimm(x2)", Description: "Load a 32-bit value from memory into register rd. It computes an effective address by adding the zero-extended offset, scaled by 4, to the stack pointer, x2.", Implementation: "x[rd] = sext(M[x[2] + uimm][31:0])", Expansion: "lw rd,offset[7:2](x2)"},
	{Name: "c.flwsp", Format: "c.flwsp    rd,uimm(x2)", Description: "Load a single-precision floating-point value from memory into floating-point register rd.It computes its effective address by adding the zero-extended offset, scaled by 4, to the stack pointer, x2.", Implementation: "f[rd] = M[x[2] + uimm][31:0]", Expansion: "flw rd,offset[7:2](x2)"},
	{Name: "c.ldsp", Format: "c.ldsp     rd,uimm(x2)", Description: "Load a 64-bit value from memory into register rd.It computes its effective address by adding the zero-extended offset, scaled by 8, to the stack pointer, x2.", Implementation: "x[rd] = M[x[2] + uimm][63:0]", Expansion: "ld rd,offset[8:3](x2)"},
	{Name: "c.jr", Format: "c.jr rs1", Description: "Performs an unconditional control transfer to the address in register rs1.", Implementation: "pc = x[rs1]", Expansion: "jalr x0,rs1,0"},
	{Name: "c.mv", Format: "c.mv       rd,rs2", Description: "Copy the value in register rs2 into register rd.", Implementation: "x[rd] = x[rs2]", Expansion: "add rd, x0, rs2"},
	{Name: "c.ebreak", Format: "c.ebreak", Description: "Cause control to be transferred back to the debugging environment.", Implementation: "RaiseException(Breakpoint)", Expansion: "ebreak"},
	{Name: "c.jalr", Format: "c.jalr     rd", Description: "Jump to address and place return address in rd.", Implementation: "t = pc+2; pc = x[rs1]; x[1] = t", Expansion: "jalr x1,rs1,0"},
	{Name: "c.add", Format: "c.add      rd,rs2", Description: "Add the values in registers rd and rs2 and writes the result to register rd.", Implementation: "x[rd] = x[rd] + x[rs2]", Expansion: "add rd,rd,rs2"},
	{Name: "c.fsdsp", Format: "c.fsdsp rs2,uimm(x2)", Description: "Store a double-precision floating-point value in floating-point register rs2 to memory.It computes an effective address by adding the zeroextended offset, scaled by 8, to the stack pointer, x2.", Implementation: "M[x[2] + uimm][63:0] = f[rs2]", Expansion: "fsd rs2,offset[8:3](x2)"},
	{Name: "c.swsp", Format: "c.swsp rs2,uimm(x2)", Description: "Store a 32-bit value in register rs2 to memory.It computes an effective address by adding the zero-extended offset, scaled by 4, to the stack pointer, x2.", Implementation: "M[x[2] + uimm][31:0] = x[rs2]", Expansion: "sw rs2,offset[7:2](x2)"},
	{Name: "c.fswsp", Format: "c.fswsp rs2,uimm(rs2)", Description: "Store a single-precision floating-point value in floating-point register rs2 to memory.It computes an effective address by adding the zero-extended offset, scaled by 4, to the stack pointer, x2.", Implementation: "M[x[2] + unimm][31:0] = f[rs2]", Expansion: "fsw rs2,offset[7:2](x2)"},
	{Name: "c.sdsp", Format: "c.sdsp rs2,uimm(x2)", Description: "Store a 64-bit value in register rs2 to memory.It computes an effective address by adding the zero-extended offset, scaled by 8, to the stack pointer, x2.", Implementation: "M[x[2] + uimm][63:0] = x[rs2]", Expansion: "sd rs2,offset[8:3](x2)"},
	{Name: "fmadd.s", Format: "fmadd.s    rd,rs1,rs2,rs3", Description: "Perform single-precision fused multiply addition.", Implementation: "f[rd] = f[rs1]\u00d7f[rs2]+f[rs3]"},
	{Name: "fmsub.s", Format: "fmsub.s    rd,rs1,rs2,rs3", Description: "Perform single-precision fused multiply addition.", Implementation: "f[rd] = f[rs1]\u00d7f[rs2]-f[rs3]"},
	{Name: "fnmsub.s", Format: "fnmsub.s   rd,rs1,rs2,rs3", Description: "Perform single-precision fused multiply addition.", Implementation: "f[rd] = -f[rs1]\u00d7f[rs2]+f[rs3]"},
	{Name: "fnmadd.s", Format: "fnmadd.s   rd,rs1,rs2,rs3", Description: "Perform single-precision fused multiply addition.", Implementation: "f[rd] = -f[rs1]\u00d7f[rs2]-f[rs3]"},
	{Name: "fadd.s", Format: "fadd.s     rd,rs1,rs2", Description: "Perform single-precision floating-point addition.", Implementation: "f[rd] = f[rs1] + f[rs2]"},
	{Name: "fsub.s", Format: "fsub.s     rd,rs1,rs2", Description: "Perform single-precision floating-point substraction.", Implementation: "f[rd] = f[rs1] - f[rs2]"},
	{Name: "fmul.s", Format: "fmul.s     rd,rs1,rs2", Description: "Perform single-precision floating-point multiplication.", Implementation: "f[rd] = f[rs1] \u00d7 f[rs2]"},
	{Name: "fdiv.s", Format: "fdiv.s     rd,rs1,rs2", Description: "Perform single-precision floating-point division.", Implementation: "f[rd] = f[rs1] / f[rs2]"},
	{Name: "fsqrt.s", Format: "fsqrt.s    rd,rs1", Description: "Perform single-precision square root.", Implementation: "f[rd] = sqrt(f[rs1])"},
	{Name: "fsgnj.s", Format: "fsgnj.s    rd,rs1,rs2", Description: "Produce a result that takes all bits except the sign bit from rs1.The result\u2019s sign bit is rs2\u2019s sign bit.", Implementation: "f[rd] = {f[rs2][31], f[rs1][30:0"},
	{Name: "fsgnjn.s", Format: "fsgnjn.s   rd,rs1,rs2", Description: "Produce a result that takes all bits except the sign bit from rs1.The result\u2019s sign bit is opposite of rs2\u2019s sign bit.", Implementation: "f[rd] = {~f[rs2][31], f[rs1][30:0"},
	{Name: "fsgnjx.s", Format: "fsgnjx.s   rd,rs1,rs2", Description: "Produce a result that takes all bits except the sign bit from rs1.The result\u2019s sign bit is XOR of sign bit of rs1 and rs2.", Implementation: "f[rd] = {f[rs1][31] ^ f[rs2][31], f[rs1][30:0"},
	{Name: "fmin.s", Format: "fmin.s     rd,rs1,rs2", Description: "Write the smaller of single precision data in rs1 and rs2 to rd.", Implementation: "f[rd] = min(f[rs1], f[rs2])"},
	{Name: "fmax.s", Format: "fmax.s     rd,rs1,rs2", Description: "Write the larger of single precision data in rs1 and rs2 to rd.", Implementation: "f[rd] = max(f[rs1], f[rs2])"},
	{Name: "fcvt.w.s", Format: "fcvt.w.s   rd,rs1", Description: "Convert a floating-point number in floating-point register rs1 to a signed 32-bit in integer register rd.", Implementation: "x[rd] = sext(s32_{f32}(f[rs1]))"},
	{Name: "fcvt.wu.s", Format: "fcvt.wu.s  rd,rs1", Description: "Convert a floating-point number in floating-point register rs1 to a signed 32-bit in unsigned integer register rd.", Implementation: "x[rd] = sext(u32_{f32}(f[rs1]))"},
	{Name: "fmv.x.w", Format: "fmv.x.w    rd,rs1", Description: "Move the single-precision value in floating-point register rs1 represented in IEEE 754-2008 encoding to the lower 32 bits of integer register rd.", Implementation: "x[rd] = sext(f[rs1][31:0])"},
	{Name: "feq.s", Format: "feq.s      rd,rs1,rs2", Description: "Performs a quiet equal comparison between floating-point registers rs1 and rs2 and record the Boolean result in integer register rd.Only signaling NaN inputs cause an Invalid Operation exception.The result is 0 if either operand is NaN.", Implementation: "x[rd] = f[rs1] == f[rs2]"},
	{Name: "flt.s", Format: "flt.s      rd,rs1,rs2", Description: "Performs a quiet less comparison between floating-point registers rs1 and rs2 and record the Boolean result in integer register rd.Only signaling NaN inputs cause an Invalid Operation exception.The result is 0 if either operand is NaN.", Implementation: "x[rd] = f[rs1] < f[rs2]"},
	{Name: "fle.s", Format: "fle.s      rd,rs1,rs2", Description: "Performs a quiet less or equal comparison between floating-point registers rs1 and rs2 and record the Boolean result in integer register rd.Only signaling NaN inputs cause an Invalid Operation exception.The result is 0 if either operand is NaN.", Implementation: "x[rd] = f[rs1] <= f[rs2]"},
	{Name: "fclass.s", Format: "fclass.s   rd,rs1", Description: "Examines the value in floating-point register rs1 and writes to integer register rd a 10-bit mask that indicates the class of the floating-point number.The format of the mask is described in [classify table]_.The corresponding bit in rd will be set if the property is true and clear otherwise.All other bits in rd are cleared. Note that exactly one bit in rd will be set.", Implementation: "x[rd] = classifys(f[rs1])"},
	{Name: "fcvt.s.w", Format: "fcvt.s.w   rd,rs1", Description: "Converts a 32-bit signed integer, in integer register rs1 into a floating-point number in floating-point register rd.", Implementation: "f[rd] = f32_{s32}(x[rs1])"},
	{Name: "fcvt.s.wu", Format: "fcvt.s.wu  rd,rs1", Description: "Converts a 32-bit unsigned integer, in integer register rs1 into a floating-point number in floating-point register rd.", Implementation: "f[rd] = f32_{u32}(x[rs1])"},
	{Name: "fmv.w.x", Format: "fmv.w.x    rd,rs1", Description: "Move the single-precision value encoded in IEEE 754-2008 standard encoding from the lower 32 bits of integer register rs1 to the floating-point register rd.", Implementation: "f[rd] = x[rs1][31:0]"},
	{Name: "fmadd.d", Format: "fmadd.d    rd,rs1,rs2,rs3", Description: "Perform single-precision fused multiply addition.", Implementation: "f[rd] = f[rs1]\u00d7f[rs2]+f[rs3]"},
	{Name: "fmsub.d", Format: "fmsub.d    rd,rs1,rs2,rs3", Description: "Perform single-precision fused multiply addition.", Implementation: "f[rd] = f[rs1]\u00d7f[rs2]-f[rs3]"},
	{Name: "fnmsub.d", Format: "fnmsub.d   rd,rs1,rs2,rs3", Description: "Perform single-precision fused multiply addition.", Implementation: "f[rd] = -f[rs1]\u00d7f[rs2+f[rs3]"},
	{Name: "fnmadd.d", Format: "fnmadd.d   rd,rs1,rs2,rs3", Description: "Perform single-precision fused multiply addition.", Implementation: "f[rd] = -f[rs1]\u00d7f[rs2]-f[rs3]"},
	{Name: "fadd.d", Format: "fadd.d     rd,rs1,rs2", Description: "Perform single-precision floating-point addition.", Implementation: "f[rd] = f[rs1] + f[rs2]"},
	{Name: "fsub.d", Format: "fsub.d     rd,rs1,rs2", Description: "Perform single-precision floating-point subtraction.", Implementation: "f[rd] = f[rs1] - f[rs2]"},
	{Name: "fmul.d", Format: "fmul.d     rd,rs1,rs2", Description: "Perform single-precision floating-point multiplication.", Implementation: "f[rd] = f[rs1] \u00d7 f[rs2]"},
	{Name: "fdiv.d", Format: "fdiv.d     rd,rs1,rs2", Description: "Perform single-precision floating-point division.", Implementation: "f[rd] = f[rs1] / f[rs2]"},
	{Name: "fsqrt.d", Format: "fsqrt.d    rd,rs1", Description: "Perform single-precision square root.", Implementation: "f[rd] = sqrt(f[rs1])"},
	{Name: "fsgnj.d", Format: "fsgnj.d    rd,rs1,rs2", Description: "Produce a result that takes all bits except the sign bit from rs1.The result\u2019s sign bit is rs2\u2019s sign bit.", Implementation: "f[rd] = {f[rs2][63], f[rs1][62:0"},
	{Name: "fsgnjn.d", Format: "fsgnjn.d   rd,rs1,rs2", Description: "Produce a result that takes all bits except the sign bit from rs1.The result\u2019s sign bit is opposite of rs2\u2019s sign bit.", Implementation: "f[rd] = {~f[rs2][63], f[rs1][62:0"},
	{Name: "fsgnjx.d", Format: "fsgnjx.d   rd,rs1,rs2", Description: "Produce a result that takes all bits except the sign bit from rs1.The result\u2019s sign bit is XOR of sign bit of rs1 and rs2.", Implementation: "f[rd] = {f[rs1][63] ^ f[rs2][63], f[rs1][62:0"},
	{Name: "fmin.d", Format: "fmin.d     rd,rs1,rs2", Description: "Write the smaller of single precision data in rs1 and rs2 to rd.", Implementation: "f[rd] = min(f[rs1], f[rs2])"},
	{Name: "fmax.d", Format: "fmax.d     rd,rs1,rs2", Description: "Write the larger of single precision data in rs1 and rs2 to rd.", Implementation: "f[rd] = max(f[rs1], f[rs2])"},
	{Name: "fcvt.s.d", Format: "fcvt.s.d   rd,rs1", Description: "Converts double floating-point register in rs1 into a floating-point number in floating-point register rd.", Implementation: "f[rd] = f32_{f64}(f[rs1])"},
	{Name: "fcvt.d.s", Format: "fcvt.d.s   rd,rs1", Description: "Converts single floating-point register in rs1 into a double floating-point number in floating-point register rd.", Implementation: "f[rd] = f64_{f32}(f[rs1])"},
	{Name: "feq.d", Format: "feq.d      rd,rs1,rs2", Description: "Performs a quiet equal comparison between floating-point registers rs1 and rs2 and record the Boolean result in integer register rd.Only signaling NaN inputs cause an Invalid Operation exception.The result is 0 if either operand is NaN.", Implementation: "x[rd] = f[rs1] == f[rs2]"},
	{Name: "flt.d", Format: "flt.d      rd,rs1,rs2", Description: "Performs a quiet less comparison between floating-point registers rs1 and rs2 and record the Boolean result in integer register rd.Only signaling NaN inputs cause an Invalid Operation exception.The result is 0 if either operand is NaN.", Implementation: "x[rd] = f[rs1] < f[rs2]"},
	{Name: "fle.d", Format: "fle.d      rd,rs1,rs2", Description: "Performs a quiet less or equal comparison between floating-point registers rs1 and rs2 and record the Boolean result in integer register rd.Only signaling NaN inputs cause an Invalid Operation exception.The result is 0 if either operand is NaN.", Implementation: "x[rd] = f[rs1] <= f[rs2]"},
	{Name: "fclass.d", Format: "fclass.d   rd,rs1", Description: "Examines the value in floating-point register rs1 and writes to integer register rd a 10-bit mask that indicates the class of the floating-point number.The format of the mask is described in table [classify table]_.The corresponding bit in rd will be set if the property is true and clear otherwise.All other bits in rd are cleared. Note that exactly one bit in rd will be set.", Implementation: "x[rd] = classifys(f[rs1])"},
	{Name: "fcvt.w.d", Format: "fcvt.w.d   rd,rs1", Description: "Converts a double-precision floating-point number in floating-point register rs1 to a signed 32-bit integer, in integer register rd.", Implementation: "x[rd] = sext(s32_{f64}(f[rs1]))"},
	{Name: "fcvt.wu.d", Format: "fcvt.wu.d  rd,rs1", Description: "Converts a double-precision floating-point number in floating-point register rs1 to a unsigned 32-bit integer, in integer register rd.", Implementation: "x[rd] = sext(u32f64(f[rs1]))"},
	{Name: "fcvt.d.w", Format: "fcvt.d.w   rd,rs1", Description: "Converts a 32-bit signed integer, in integer register rs1 into a double-precision floating-point number in floating-point register rd.", Implementation: "x[rd] = sext(s32_{f64}(f[rs1]))"},
	{Name: "fcvt.d.wu", Format: "fcvt.d.wu  rd,rs1", Description: "Converts a 32-bit unsigned integer, in integer register rs1 into a double-precision floating-point number in floating-point register rd.", Implementation: "f[rd] = f64_{u32}(x[rs1])"},
	{Name: "flw", Format: "flw        rd,offset(rs1)", Description: "Load a single-precision floating-point value from memory into floating-point register rd.", Implementation: "f[rd] = M[x[rs1] + sext(offset)][31:0]"},
	{Name: "fsw", Format: "fsw        rs2,offset(rs1)", Description: "Store a single-precision value from floating-point register rs2 to memory.", Implementation: "M[x[rs1] + sext(offset)] = f[rs2][31:0]"},
	{Name: "fld", Format: "fld        rd,rs1,offset", Description: "Load a double-precision floating-point value from memory into floating-point register rd.", Implementation: "f[rd] = M[x[rs1] + sext(offset)][63:0]"},
	{Name: "fsd", Format: "fsd        rs2,offset(rs1)", Description: "Store a double-precision value from the floating-point registers to memory.", Implementation: "M[x[rs1] + sext(offset)] = f[rs2][63:0]"},
	{Name:"lui", Sdescription:"load upper immediate.", Format:"lui        rd,imm", Description:"Build 32-bit constants and uses the U-type format. LUI places the U-immediate value in the top 20 bits of the destination register rd, filling in the lowest 12 bits with zeros.", Implementation:"x[rd] = sext(immediate[31:12] << 12)"},
	{Name:"auipc", Sdescription:"add upper immediate to pc", Format:"auipc      rd,imm", Description:"Build pc-relative addresses and uses the U-type format. AUIPC forms a 32-bit offset from the 20-bit U-immediate, filling in the lowest 12 bits with zeros, adds this offset to the pc, then places the result in register rd.", Implementation:"x[rd] = pc + sext(immediate[31:12] << 12)"},
	{Name:"addi", Sdescription:"add immediate", Format:"addi       rd,rs1,imm", Description:"Adds the sign-extended 12-bit immediate to register rs1. Arithmetic overflow is ignored and the result is simply the low XLEN bits of the result. ADDI rd, rs1, 0 is used to implement the MV rd, rs1 assembler pseudo-instruction.", Implementation:"x[rd] = x[rs1] + sext(immediate)"},
	{Name:"slti", Sdescription:"set less than immediate", Format:"slti       rd,rs1,imm", Description:"Place the value 1 in register rd if register rs1 is less than the signextended immediate when both are treated as signed numbers, else 0 is written to rd.", Implementation:"x[rd] = x[rs1] <s sext(immediate)"},
	{Name:"sltiu", Format:"sltiu      rd,rs1,imm", Description:"Place the value 1 in register rd if register rs1 is less than the immediate when both are treated as unsigned numbers, else 0 is written to rd.", Implementation:"x[rd] = x[rs1] <u sext(immediate)"},
	{Name:"xori", Format:"xori       rd,rs1,imm", Description:"Performs bitwise XOR on register rs1 and the sign-extended 12-bit immediate and place the result in rd", Implementation:"x[rd] = x[rs1] ^ sext(immediate)"},
	{Name:"ori", Format:"ori        rd,rs1,imm", Description:"Performs bitwise OR on register rs1 and the sign-extended 12-bit immediate and place the result in rd", Implementation:"x[rd] = x[rs1] | sext(immediate)"},
	{Name:"andi", Format:"andi       rd,rs1,imm", Description:"Performs bitwise AND on register rs1 and the sign-extended 12-bit immediate and place the result in rd", Implementation:"x[rd] = x[rs1] & sext(immediate)"},
	{Name:"slli", Format:"slli       rd,rs1,shamt", Description:"Performs logical left shift on the value in register rs1 by the shift amount held in the lower 5 bits of the immediate", Implementation:"x[rd] = x[rs1] << shamt"},
	{Name:"srli", Format:"srli       rd,rs1,shamt", Description:"Performs logical right shift on the value in register rs1 by the shift amount held in the lower 5 bits of the immediate", Implementation:"x[rd] = x[rs1] >>u shamt"},
	{Name:"srai", Format:"srai       rd,rs1,shamt", Description:"Performs arithmetic right shift on the value in register rs1 by the shift amount held in the lower 5 bits of the immediate", Implementation:"x[rd] = x[rs1] >>s shamt"},
	{Name:"add", Format:"add        rd,rs1,rs2", Description:"Adds the registers rs1 and rs2 and stores the result in rd.", Implementation:"x[rd] = x[rs1] + x[rs2]"},
	{Name:"sub", Format:"sub        rd,rs1,rs2", Description:"Subs the register rs2 from rs1 and stores the result in rd.", Implementation:"x[rd] = x[rs1] - x[rs2]"},
	{Name:"sll", Format:"sll        rd,rs1,rs2", Description:"Performs logical left shift on the value in register rs1 by the shift amount held in the lower 5 bits of register rs2.", Implementation:"x[rd] = x[rs1] << x[rs2]"},
	{Name:"slt", Format:"slt        rd,rs1,rs2", Description:"Place the value 1 in register rd if register rs1 is less than register rs2 when both are treated as signed numbers, else 0 is written to rd.", Implementation:"x[rd] = x[rs1] <s x[rs2]"},
	{Name:"sltu", Format:"sltu       rd,rs1,rs2", Description:"Place the value 1 in register rd if register rs1 is less than register rs2 when both are treated as unsigned numbers, else 0 is written to rd.", Implementation:"x[rd] = x[rs1] <u x[rs2]"},
	{Name:"xor", Format:"xor        rd,rs1,rs2", Description:"Performs bitwise XOR on registers rs1 and rs2 and place the result in rd", Implementation:"x[rd] = x[rs1] ^ x[rs2]"},
	{Name:"srl", Format:"srl        rd,rs1,rs2", Description:"Logical right shift on the value in register rs1 by the shift amount held in the lower 5 bits of register rs2", Implementation:"x[rd] = x[rs1] >>u x[rs2]"},
	{Name:"sra", Format:"sra        rd,rs1,rs2", Description:"Performs arithmetic right shift on the value in register rs1 by the shift amount held in the lower 5 bits of register rs2", Implementation:"x[rd] = x[rs1] >>s x[rs2]"},
	{Name:"or", Format:"or         rd,rs1,rs2", Description:"Performs bitwise OR on registers rs1 and rs2 and place the result in rd", Implementation:"x[rd] = x[rs1] | x[rs2]"},
	{Name:"and", Format:"and        rd,rs1,rs2", Description:"Performs bitwise AND on registers rs1 and rs2 and place the result in rd", Implementation:"x[rd] = x[rs1] & x[rs2]"},
	{Name:"fence", Format:"fence pred, succ", Description:"Used to order device I/O and memory accesses as viewed by other RISC-V harts and external devices or coprocessors.", Implementation:"Fence(pred, succ)", Sdescription:"fence."},
	{Name:"i", Format:"fence.i", Description:"Provides explicit synchronization between writes to instruction memory and instruction fetches on the same hart.", Implementation:"Fence(Store, Fetch)"},
	{Name:"csrrw", Sdescription:"atomic read/write CSR.", Format:"csrrw      rd,offset,rs1", Description:"Atomically swaps values in the CSRs and integer registers.", Implementation:"t = CSRs[csr]; CSRs[csr] = x[rs1]; x[rd] = t"},
	{Name:"csrrs", Sdescription:"atomic read and set bits in CSR.", Format:"csrrs      rd,offset,rs1", Description:"Reads the value of the CSR, zero-extends the value to XLEN bits, and writes it to integer register rd.", Implementation:"t = CSRs[csr]; CSRs[csr] = t | x[rs1]; x[rd] = t"},
	{Name:"csrrc", Sdescription:"atomic read and clear bits in CSR.", Format:"csrrc      rd,offset,rs1", Description:"Reads the value of the CSR, zero-extends the value to XLEN bits, and writes it to integer register rd.", Implementation:"t = CSRs[csr]; CSRs[csr] = t &∼x[rs1]; x[rd] = t"},
	{Name:"csrrwi", Format:"csrrwi     rd,offset,uimm", Description:"Update the CSR using an XLEN-bit value obtained by zero-extending a 5-bit unsigned immediate (uimm[4:0]) field encoded in the rs1 field.", Implementation:"x[rd] = CSRs[csr]; CSRs[csr] = zimm"},
	{Name:"csrrsi", Format:"csrrsi     rd,offset,uimm", Description:"Set CSR bit using an XLEN-bit value obtained by zero-extending a 5-bit unsigned immediate (uimm[4:0]) field encoded in the rs1 field.", Implementation:"t = CSRs[csr]; CSRs[csr] = t | zimm; x[rd] = t"},
	{Name:"csrrci", Format:"csrrci     rd,offset,uimm", Description:"Clear CSR bit using an XLEN-bit value obtained by zero-extending a 5-bit unsigned immediate (uimm[4:0]) field encoded in the rs1 field.", Implementation:"t = CSRs[csr]; CSRs[csr] = t &∼zimm; x[rd] = t"},
	{Name:"ecall", Format:"ecall", Description:"Make a request to the supporting execution environment.", Implementation:"RaiseException(EnvironmentCall)"},
	{Name:"ebreak", Format:"ebreak", Description:"Used by debuggers to cause control to be transferred back to a debugging environment.", Implementation:"RaiseException(Breakpoint)"},
	{Name:"uret", Format:"uret", Description:"Return from traps in U-mode, and URET copies UPIE into UIE, then sets UPIE.", Implementation:"ExceptionReturn(User)"},
	{Name:"sret", Format:"sret", Description:"Return from traps in S-mode, and SRET copies SPIE into SIE, then sets SPIE.", Implementation:"ExceptionReturn(User)"},
	{Name:"mret", Format:"mret", Description:"Return from traps in M-mode, and MRET copies MPIE into MIE, then sets MPIE.", Implementation:"ExceptionReturn(Machine)"},
	{Name:"wfi", Sdescription:"wait for interrupt.", Format:"wfi", Description:"Provides a hint to the implementation that the current hart can be stalled until an interrupt   might need servicing.", Implementation:"while (noInterruptsPending) idle"},
	{Name:"vma", Format:"sfence.vma rs1,rs2", Description:"Guarantees that any previous stores already visible to the current RISC-V hart are ordered before all subsequent implicit references from that hart to the memory-management data structures.", Implementation:"Fence(Store, AddressTranslation)"},
	{Name:"lb", Format:"lb         rd,offset(rs1)", Description:"Loads a 8-bit value from memory and sign-extends this to XLEN bits before storing it in register rd.", Implementation:"x[rd] = sext(M[x[rs1] + sext(offset)][7:0])"},
	{Name:"lh", Format:"lh         rd,offset(rs1)", Description:"Loads a 16-bit value from memory and sign-extends this to XLEN bits before storing it in register rd.", Implementation:"x[rd] = sext(M[x[rs1] + sext(offset)][15:0])"},
	{Name:"lw", Format:"lw         rd,offset(rs1)", Description:"Loads a 32-bit value from memory and sign-extends this to XLEN bits before storing it in register rd.", Implementation:"x[rd] = sext(M[x[rs1] + sext(offset)][31:0])"},
	{Name:"lbu", Format:"lbu        rd,offset(rs1)", Description:"Loads a 8-bit value from memory and zero-extends this to XLEN bits before storing it in register rd.", Implementation:"x[rd] = M[x[rs1] + sext(offset)][7:0]"},
	{Name:"lhu", Format:"lhu        rd,offset(rs1)", Description:"Loads a 16-bit value from memory and zero-extends this to XLEN bits before storing it in register rd.", Implementation:"x[rd] = M[x[rs1] + sext(offset)][15:0]"},
	{Name:"sb", Format:"sb         rs2,offset(rs1)", Description:"Store 8-bit, values from the low bits of register rs2 to memory.", Implementation:"M[x[rs1] + sext(offset)] = x[rs2][7:0]"},
	{Name:"sh", Format:"sh         rs2,offset(rs1)", Description:"Store 16-bit, values from the low bits of register rs2 to memory.", Implementation:"M[x[rs1] + sext(offset)] = x[rs2][15:0]"},
	{Name:"sw", Format:"sw         rs2,offset(rs1)", Description:"Store 32-bit, values from the low bits of register rs2 to memory.", Implementation:"M[x[rs1] + sext(offset)] = x[rs2][31:0]"},
	{Name:"jal", Format:"jal        rd,offset", Description:"Jump to address and place return address in rd.", Implementation:"x[rd] = pc+4; pc += sext(offset)"},
	{Name:"jalr", Format:"jalr       rd,rs1,offset", Description:"Jump to address and place return address in rd.", Implementation:"t =pc+4; pc=(x[rs1]+sext(offset))&∼1; x[rd]=t"},
	{Name:"beq", Format:"beq        rs1,rs2,offset", Description:"Take the branch if registers rs1 and rs2 are equal.", Implementation:"if (x[rs1] == x[rs2]) pc += sext(offset)"},
	{Name:"bne", Format:"bne        rs1,rs2,offset", Description:"Take the branch if registers rs1 and rs2 are not equal.", Implementation:"if (x[rs1] != x[rs2]) pc += sext(offset)"},
	{Name:"blt", Format:"blt        rs1,rs2,offset", Description:"Take the branch if registers rs1 is less than rs2, using signed comparison.", Implementation:"if (x[rs1] <s x[rs2]) pc += sext(offset)"},
	{Name:"bge", Format:"bge        rs1,rs2,offset", Description:"Take the branch if registers rs1 is greater than or equal to rs2, using signed comparison.", Implementation:"if (x[rs1] >=s x[rs2]) pc += sext(offset)"},
	{Name:"bltu", Format:"bltu       rs1,rs2,offset", Description:"Take the branch if registers rs1 is less than rs2, using unsigned comparison.", Implementation:"if (x[rs1] <u x[rs2]) pc += sext(offset)"},
	{Name:"bgeu", Format:"bgeu       rs1,rs2,offset", Description:"Take the branch if registers rs1 is greater than or equal to rs2, using unsigned comparison.", Implementation:"if (x[rs1] >=u x[rs2]) pc += sext(offset)"},
	{Name: "mul", Format: "mul        rd,rs1,rs2", Description: "performs an XLEN-bit ", Implementation: "x[rd] = x[rs1] \u00d7 x[rs2]"},
	{Name: "mulh", Format: "mulh       rd,rs1,rs2", Description: "performs an XLEN-bit ", Implementation: "x[rd] = (x[rs1] s\u00d7s x[rs2]) >>s XLEN"},
	{Name: "mulhsu", Format: "mulhsu     rd,rs1,rs2", Description: "performs an XLEN-bit ", Implementation: "x[rd] = (x[rs1] s "},
	{Name: "mulhu", Format: "mulhu      rd,rs1,rs2", Description: "performs an XLEN-bit ", Implementation: "x[rd] = (x[rs1] u "},
	{Name: "div", Format: "div        rd,rs1,rs2", Description: "perform an XLEN bits by XLEN bits signed integer division of rs1 by rs2, rounding towards zero.", Implementation: "x[rd] = x[rs1] /s x[rs2]"},
	{Name: "divu", Format: "divu       rd,rs1,rs2", Description: "perform an XLEN bits by XLEN bits unsigned integer division of rs1 by rs2, rounding towards zero.", Implementation: "x[rd] = x[rs1] /u x[rs2]"},
	{Name: "rem", Format: "rem        rd,rs1,rs2", Description: "perform an XLEN bits by XLEN bits signed integer reminder of rs1 by rs2.", Implementation: "x[rd] = x[rs1] %s x[rs2]"},
	{Name: "remu", Format: "remu       rd,rs1,rs2", Description: "perform an XLEN bits by XLEN bits unsigned integer reminder of rs1 by rs2.", Implementation: "x[rd] = x[rs1] %u x[rs2]"},
}
